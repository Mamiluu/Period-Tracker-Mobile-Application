{"version":3,"sources":["index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","firestore","auth","app","persistence","AsyncStorage","registerUser","name","email","password","type","additionalData","userCredential","user","uid","createdAt","success","console","error","message","loginUser","emailVerified","Error","getCurrentUser","currentUser","logoutUser","signOut","resendVerificationEmail"],"mappings":"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","sourcesContent":["// Import Firebase and related modules\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport 'firebase/compat/storage';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport {\r\n  getAuth,\r\n  initializeAuth,\r\n  getReactNativePersistence,\r\n  sendEmailVerification,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n} from 'firebase/auth';\r\nimport { getFirestore, setDoc, doc, serverTimestamp } from 'firebase/firestore';\r\n\r\n// Firebase configuration - replace with your Firebase project's settings\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDCyXIxCTVUg47CnbH-L7sceZ9lPG8oKVA\",\r\n  authDomain: \"tracker-eed94.firebaseapp.com\",\r\n  projectId: \"tracker-eed94\",\r\n  storageBucket: \"tracker-eed94.appspot.com\",\r\n  messagingSenderId: \"1082875479231\",\r\n  appId: \"1:1082875479231:web:e8f72d1a300bd925e5f20a\",\r\n  measurementId: \"G-JTTCJGC69C\"\r\n};\r\n\r\n// Initialize Firebase app if not already initialized\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n// Initialize Firestore\r\nconst firestore = getFirestore();\r\n\r\n// Initialize Firebase Auth with AsyncStorage for persistence\r\nconst auth = initializeAuth(firebase.app(), {\r\n  persistence: getReactNativePersistence(AsyncStorage),\r\n});\r\n\r\n// Function to create a new user account, store user data in Firestore, and send verification email\r\nexport const registerUser = async ({ name, email, password, type, ...additionalData }) => {\r\n  try {\r\n    // Register user with email and password\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n\r\n    // Store user data in Firestore\r\n    await setDoc(doc(firestore, 'users', user.uid), {\r\n      name,\r\n      email,\r\n      type,\r\n      ...additionalData,\r\n      createdAt: serverTimestamp(),\r\n    });\r\n\r\n    // Send verification email\r\n    await sendEmailVerification(user);\r\n    return { success: true, user };\r\n  } catch (error) {\r\n    console.error('Error registering user:', error.message);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Function to log in an existing user with email verification check\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n\r\n    // Check if email is verified\r\n    if (!user.emailVerified) {\r\n      throw new Error('Email not verified. Please check your email to verify your account.');\r\n    }\r\n\r\n    return { success: true, user };\r\n  } catch (error) {\r\n    console.error('Error logging in user:', error.message);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Function to get the current user info\r\nexport const getCurrentUser = () => {\r\n  return auth.currentUser;\r\n};\r\n\r\n// Function to log out the current user\r\nexport const logoutUser = async () => {\r\n  try {\r\n    await auth.signOut();\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error logging out:', error.message);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Function to resend verification email if needed\r\nexport const resendVerificationEmail = async () => {\r\n  const user = auth.currentUser;\r\n  if (user && !user.emailVerified) {\r\n    try {\r\n      await sendEmailVerification(user);\r\n      return { success: true, message: 'Verification email resent. Please check your inbox.' };\r\n    } catch (error) {\r\n      console.error('Error resending verification email:', error.message);\r\n      return { success: false, message: error.message };\r\n    }\r\n  } else {\r\n    return { success: false, message: 'User is either not logged in or already verified.' };\r\n  }\r\n};\r\n\r\n// Export auth and firestore for use in other parts of the app\r\nexport { auth, firestore };\r\n"],"file":"index.dev.js"}