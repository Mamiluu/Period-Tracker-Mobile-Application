{"version":3,"sources":["index.js"],"names":["_app","_interopRequireDefault","require","_asyncStorage","_auth2","_firestore2","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","firestore","getFirestore","initializeAuth","app","getReactNativePersistence","AsyncStorage","_ref","name","email","password","type","additionalData","userCredential","user","regeneratorRuntime","async","_context","prev","next","_objectWithoutProperties","awrap","createUserWithEmailAndPassword","auth","sent","setDoc","doc","uid","_objectSpread","persistence","serverTimestamp","sendEmailVerification","abrupt","registerUser","t0","console","error","message","success","stop","loginUser","_context2","signInWithEmailAndPassword","emailVerified","Error","createdAt","getCurrentUser","currentUser","signOut","_context3","resendVerificationEmail","_context4"],"mappings":"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","file":"index.min.js","sourcesContent":["// Import Firebase and related modules\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport 'firebase/compat/storage';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport {\r\n  getAuth,\r\n  initializeAuth,\r\n  getReactNativePersistence,\r\n  sendEmailVerification,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n} from 'firebase/auth';\r\nimport { getFirestore, setDoc, doc, serverTimestamp } from 'firebase/firestore';\r\n\r\n// Firebase configuration - replace with your Firebase project's settings\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDCyXIxCTVUg47CnbH-L7sceZ9lPG8oKVA\",\r\n  authDomain: \"tracker-eed94.firebaseapp.com\",\r\n  projectId: \"tracker-eed94\",\r\n  storageBucket: \"tracker-eed94.appspot.com\",\r\n  messagingSenderId: \"1082875479231\",\r\n  appId: \"1:1082875479231:web:e8f72d1a300bd925e5f20a\",\r\n  measurementId: \"G-JTTCJGC69C\"\r\n};\r\n\r\n// Initialize Firebase app if not already initialized\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n// Initialize Firestore\r\nconst firestore = getFirestore();\r\n\r\n// Initialize Firebase Auth with AsyncStorage for persistence\r\nconst auth = initializeAuth(firebase.app(), {\r\n  persistence: getReactNativePersistence(AsyncStorage),\r\n});\r\n\r\n// Function to create a new user account, store user data in Firestore, and send verification email\r\nexport const registerUser = async ({ name, email, password, type, ...additionalData }) => {\r\n  try {\r\n    // Register user with email and password\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n\r\n    // Store user data in Firestore\r\n    await setDoc(doc(firestore, 'users', user.uid), {\r\n      name,\r\n      email,\r\n      type,\r\n      ...additionalData,\r\n      createdAt: serverTimestamp(),\r\n    });\r\n\r\n    // Send verification email\r\n    await sendEmailVerification(user);\r\n    return { success: true, user };\r\n  } catch (error) {\r\n    console.error('Error registering user:', error.message);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Function to log in an existing user with email verification check\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n\r\n    // Check if email is verified\r\n    if (!user.emailVerified) {\r\n      throw new Error('Email not verified. Please check your email to verify your account.');\r\n    }\r\n\r\n    return { success: true, user };\r\n  } catch (error) {\r\n    console.error('Error logging in user:', error.message);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Function to get the current user info\r\nexport const getCurrentUser = () => {\r\n  return auth.currentUser;\r\n};\r\n\r\n// Function to log out the current user\r\nexport const logoutUser = async () => {\r\n  try {\r\n    await auth.signOut();\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error logging out:', error.message);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Function to resend verification email if needed\r\nexport const resendVerificationEmail = async () => {\r\n  const user = auth.currentUser;\r\n  if (user && !user.emailVerified) {\r\n    try {\r\n      await sendEmailVerification(user);\r\n      return { success: true, message: 'Verification email resent. Please check your inbox.' };\r\n    } catch (error) {\r\n      console.error('Error resending verification email:', error.message);\r\n      return { success: false, message: error.message };\r\n    }\r\n  } else {\r\n    return { success: false, message: 'User is either not logged in or already verified.' };\r\n  }\r\n};\r\n\r\n// Export auth and firestore for use in other parts of the app\r\nexport { auth, firestore };\r\n"]}